/*
 * This file is generated by jOOQ.
 */
package com.bcorp.polaris.core.model.tables;


import com.bcorp.polaris.core.model.Keys;
import com.bcorp.polaris.core.model.PolarisDb;
import com.bcorp.polaris.core.model.tables.records.BookRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Book extends TableImpl<BookRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>polaris-db.book</code>
     */
    public static final Book BOOK = new Book();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookRecord> getRecordType() {
        return BookRecord.class;
    }

    /**
     * The column <code>polaris-db.book.id</code>.
     */
    public final TableField<BookRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>polaris-db.book.user_id</code>. User(Author) id
     */
    public final TableField<BookRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "User(Author) id");

    /**
     * The column <code>polaris-db.book.title</code>. 書本標題
     */
    public final TableField<BookRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "書本標題");

    /**
     * The column <code>polaris-db.book.subtitle</code>. 書本副標題
     */
    public final TableField<BookRecord, String> SUBTITLE = createField(DSL.name("subtitle"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "書本副標題");

    /**
     * The column <code>polaris-db.book.price_type</code>. 免費or付費閱讀，1-免費,
     * 2-付費，預設為 2
     */
    public final TableField<BookRecord, Byte> PRICE_TYPE = createField(DSL.name("price_type"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("2", SQLDataType.TINYINT)), this, "免費or付費閱讀，1-免費, 2-付費，預設為 2");

    /**
     * The column <code>polaris-db.book.price</code>. 書本售價
     */
    public final TableField<BookRecord, BigDecimal> PRICE = createField(DSL.name("price"), SQLDataType.DECIMAL(10, 2).nullable(false).defaultValue(DSL.inline("0.00", SQLDataType.DECIMAL)), this, "書本售價");

    /**
     * The column <code>polaris-db.book.synopsis</code>. 書本簡介
     */
    public final TableField<BookRecord, String> SYNOPSIS = createField(DSL.name("synopsis"), SQLDataType.CLOB, this, "書本簡介");

    /**
     * The column <code>polaris-db.book.acquisition</code>. 你能學到
     */
    public final TableField<BookRecord, String> ACQUISITION = createField(DSL.name("acquisition"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "你能學到");

    /**
     * The column <code>polaris-db.book.cover</code>. 書封
     */
    public final TableField<BookRecord, String> COVER = createField(DSL.name("cover"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "書封");

    /**
     * The column <code>polaris-db.book.published_at</code>. 出版日期
     */
    public final TableField<BookRecord, LocalDateTime> PUBLISHED_AT = createField(DSL.name("published_at"), SQLDataType.LOCALDATETIME(0), this, "出版日期");

    /**
     * The column <code>polaris-db.book.status</code>. 上架狀態，0-未上架，1-已上架，預設為 0
     */
    public final TableField<BookRecord, Byte> STATUS = createField(DSL.name("status"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "上架狀態，0-未上架，1-已上架，預設為 0");

    /**
     * The column <code>polaris-db.book.character_count</code>. 總字數
     */
    public final TableField<BookRecord, Integer> CHARACTER_COUNT = createField(DSL.name("character_count"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "總字數");

    /**
     * The column <code>polaris-db.book.is_deleted</code>. 是否刪除，0-未刪除，1-刪除，預設為 0
     */
    public final TableField<BookRecord, Byte> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "是否刪除，0-未刪除，1-刪除，預設為 0");

    /**
     * The column <code>polaris-db.book.created_at</code>. 建立時間
     */
    public final TableField<BookRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "建立時間");

    /**
     * The column <code>polaris-db.book.updated_at</code>. 修改時間
     */
    public final TableField<BookRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "修改時間");

    private Book(Name alias, Table<BookRecord> aliased) {
        this(alias, aliased, null);
    }

    private Book(Name alias, Table<BookRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>polaris-db.book</code> table reference
     */
    public Book(String alias) {
        this(DSL.name(alias), BOOK);
    }

    /**
     * Create an aliased <code>polaris-db.book</code> table reference
     */
    public Book(Name alias) {
        this(alias, BOOK);
    }

    /**
     * Create a <code>polaris-db.book</code> table reference
     */
    public Book() {
        this(DSL.name("book"), null);
    }

    public <O extends Record> Book(Table<O> child, ForeignKey<O, BookRecord> key) {
        super(child, key, BOOK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PolarisDb.POLARIS_DB;
    }

    @Override
    public Identity<BookRecord, Long> getIdentity() {
        return (Identity<BookRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BookRecord> getPrimaryKey() {
        return Keys.KEY_BOOK_PRIMARY;
    }

    @Override
    public Book as(String alias) {
        return new Book(DSL.name(alias), this);
    }

    @Override
    public Book as(Name alias) {
        return new Book(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Book rename(String name) {
        return new Book(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Book rename(Name name) {
        return new Book(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<Long, Long, String, String, Byte, BigDecimal, String, String, String, LocalDateTime, Byte, Integer, Byte, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
