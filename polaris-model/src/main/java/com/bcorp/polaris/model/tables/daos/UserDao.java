/*
 * This file is generated by jOOQ.
 */
package com.bcorp.polaris.model.tables.daos;


import com.bcorp.polaris.model.tables.User;
import com.bcorp.polaris.model.tables.records.UserRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.jooq.types.UByte;
import org.jooq.types.ULong;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class UserDao extends DAOImpl<UserRecord, com.bcorp.polaris.model.tables.pojos.User, ULong> {

    /**
     * Create a new UserDao without any configuration
     */
    public UserDao() {
        super(User.USER, com.bcorp.polaris.model.tables.pojos.User.class);
    }

    /**
     * Create a new UserDao with an attached configuration
     */
    @Autowired
    public UserDao(Configuration configuration) {
        super(User.USER, com.bcorp.polaris.model.tables.pojos.User.class, configuration);
    }

    @Override
    public ULong getId(com.bcorp.polaris.model.tables.pojos.User object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchRangeOfId(ULong lowerInclusive, ULong upperInclusive) {
        return fetchRange(User.USER.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchById(ULong... values) {
        return fetch(User.USER.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.bcorp.polaris.model.tables.pojos.User fetchOneById(ULong value) {
        return fetchOne(User.USER.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.bcorp.polaris.model.tables.pojos.User> fetchOptionalById(ULong value) {
        return fetchOptional(User.USER.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchByName(String... values) {
        return fetch(User.USER.NAME, values);
    }

    /**
     * Fetch records that have <code>uid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchRangeOfUid(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.UID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uid IN (values)</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchByUid(String... values) {
        return fetch(User.USER.UID, values);
    }

    /**
     * Fetch a unique record that has <code>uid = value</code>
     */
    public com.bcorp.polaris.model.tables.pojos.User fetchOneByUid(String value) {
        return fetchOne(User.USER.UID, value);
    }

    /**
     * Fetch a unique record that has <code>uid = value</code>
     */
    public Optional<com.bcorp.polaris.model.tables.pojos.User> fetchOptionalByUid(String value) {
        return fetchOptional(User.USER.UID, value);
    }

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchRangeOfPassword(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.PASSWORD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchByPassword(String... values) {
        return fetch(User.USER.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchByEmail(String... values) {
        return fetch(User.USER.EMAIL, values);
    }

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    public com.bcorp.polaris.model.tables.pojos.User fetchOneByEmail(String value) {
        return fetchOne(User.USER.EMAIL, value);
    }

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    public Optional<com.bcorp.polaris.model.tables.pojos.User> fetchOptionalByEmail(String value) {
        return fetchOptional(User.USER.EMAIL, value);
    }

    /**
     * Fetch records that have <code>avatar BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchRangeOfAvatar(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.AVATAR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>avatar IN (values)</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchByAvatar(String... values) {
        return fetch(User.USER.AVATAR, values);
    }

    /**
     * Fetch records that have <code>short_bio BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchRangeOfShortBio(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.SHORT_BIO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>short_bio IN (values)</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchByShortBio(String... values) {
        return fetch(User.USER.SHORT_BIO, values);
    }

    /**
     * Fetch records that have <code>full_bio BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchRangeOfFullBio(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.FULL_BIO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>full_bio IN (values)</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchByFullBio(String... values) {
        return fetch(User.USER.FULL_BIO, values);
    }

    /**
     * Fetch records that have <code>birthday BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchRangeOfBirthday(LocalDate lowerInclusive, LocalDate upperInclusive) {
        return fetchRange(User.USER.BIRTHDAY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>birthday IN (values)</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchByBirthday(LocalDate... values) {
        return fetch(User.USER.BIRTHDAY, values);
    }

    /**
     * Fetch records that have <code>is_author BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchRangeOfIsAuthor(UByte lowerInclusive, UByte upperInclusive) {
        return fetchRange(User.USER.IS_AUTHOR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_author IN (values)</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchByIsAuthor(UByte... values) {
        return fetch(User.USER.IS_AUTHOR, values);
    }

    /**
     * Fetch records that have <code>twitter BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchRangeOfTwitter(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.TWITTER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>twitter IN (values)</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchByTwitter(String... values) {
        return fetch(User.USER.TWITTER, values);
    }

    /**
     * Fetch records that have <code>github BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchRangeOfGithub(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.GITHUB, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>github IN (values)</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchByGithub(String... values) {
        return fetch(User.USER.GITHUB, values);
    }

    /**
     * Fetch records that have <code>linkedin BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchRangeOfLinkedin(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.LINKEDIN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>linkedin IN (values)</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchByLinkedin(String... values) {
        return fetch(User.USER.LINKEDIN, values);
    }

    /**
     * Fetch records that have <code>facebook BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchRangeOfFacebook(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.FACEBOOK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>facebook IN (values)</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchByFacebook(String... values) {
        return fetch(User.USER.FACEBOOK, values);
    }

    /**
     * Fetch records that have <code>is_blocked BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchRangeOfIsBlocked(UByte lowerInclusive, UByte upperInclusive) {
        return fetchRange(User.USER.IS_BLOCKED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_blocked IN (values)</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchByIsBlocked(UByte... values) {
        return fetch(User.USER.IS_BLOCKED, values);
    }

    /**
     * Fetch records that have <code>is_deleted BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchRangeOfIsDeleted(UByte lowerInclusive, UByte upperInclusive) {
        return fetchRange(User.USER.IS_DELETED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_deleted IN (values)</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchByIsDeleted(UByte... values) {
        return fetch(User.USER.IS_DELETED, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(User.USER.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(User.USER.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchRangeOfUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(User.USER.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.User> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(User.USER.UPDATED_AT, values);
    }
}
