/*
 * This file is generated by jOOQ.
 */
package com.bcorp.polaris.model.tables.daos;


import com.bcorp.polaris.model.tables.Book;
import com.bcorp.polaris.model.tables.records.BookRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.jooq.types.UByte;
import org.jooq.types.ULong;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class BookDao extends DAOImpl<BookRecord, com.bcorp.polaris.model.tables.pojos.Book, ULong> {

    /**
     * Create a new BookDao without any configuration
     */
    public BookDao() {
        super(Book.BOOK, com.bcorp.polaris.model.tables.pojos.Book.class);
    }

    /**
     * Create a new BookDao with an attached configuration
     */
    @Autowired
    public BookDao(Configuration configuration) {
        super(Book.BOOK, com.bcorp.polaris.model.tables.pojos.Book.class, configuration);
    }

    @Override
    public ULong getId(com.bcorp.polaris.model.tables.pojos.Book object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.Book> fetchRangeOfId(ULong lowerInclusive, ULong upperInclusive) {
        return fetchRange(Book.BOOK.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.Book> fetchById(ULong... values) {
        return fetch(Book.BOOK.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.bcorp.polaris.model.tables.pojos.Book fetchOneById(ULong value) {
        return fetchOne(Book.BOOK.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.bcorp.polaris.model.tables.pojos.Book> fetchOptionalById(ULong value) {
        return fetchOptional(Book.BOOK.ID, value);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.Book> fetchRangeOfUserId(ULong lowerInclusive, ULong upperInclusive) {
        return fetchRange(Book.BOOK.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.Book> fetchByUserId(ULong... values) {
        return fetch(Book.BOOK.USER_ID, values);
    }

    /**
     * Fetch records that have <code>book_category_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.Book> fetchRangeOfBookCategoryId(ULong lowerInclusive, ULong upperInclusive) {
        return fetchRange(Book.BOOK.BOOK_CATEGORY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>book_category_id IN (values)</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.Book> fetchByBookCategoryId(ULong... values) {
        return fetch(Book.BOOK.BOOK_CATEGORY_ID, values);
    }

    /**
     * Fetch records that have <code>title BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.Book> fetchRangeOfTitle(String lowerInclusive, String upperInclusive) {
        return fetchRange(Book.BOOK.TITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.Book> fetchByTitle(String... values) {
        return fetch(Book.BOOK.TITLE, values);
    }

    /**
     * Fetch records that have <code>price_type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.Book> fetchRangeOfPriceType(UByte lowerInclusive, UByte upperInclusive) {
        return fetchRange(Book.BOOK.PRICE_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>price_type IN (values)</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.Book> fetchByPriceType(UByte... values) {
        return fetch(Book.BOOK.PRICE_TYPE, values);
    }

    /**
     * Fetch records that have <code>price BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.Book> fetchRangeOfPrice(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(Book.BOOK.PRICE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>price IN (values)</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.Book> fetchByPrice(BigDecimal... values) {
        return fetch(Book.BOOK.PRICE, values);
    }

    /**
     * Fetch records that have <code>synopsis BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.Book> fetchRangeOfSynopsis(String lowerInclusive, String upperInclusive) {
        return fetchRange(Book.BOOK.SYNOPSIS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>synopsis IN (values)</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.Book> fetchBySynopsis(String... values) {
        return fetch(Book.BOOK.SYNOPSIS, values);
    }

    /**
     * Fetch records that have <code>acquisition BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.Book> fetchRangeOfAcquisition(String lowerInclusive, String upperInclusive) {
        return fetchRange(Book.BOOK.ACQUISITION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>acquisition IN (values)</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.Book> fetchByAcquisition(String... values) {
        return fetch(Book.BOOK.ACQUISITION, values);
    }

    /**
     * Fetch records that have <code>cover BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.Book> fetchRangeOfCover(String lowerInclusive, String upperInclusive) {
        return fetchRange(Book.BOOK.COVER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>cover IN (values)</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.Book> fetchByCover(String... values) {
        return fetch(Book.BOOK.COVER, values);
    }

    /**
     * Fetch records that have <code>published_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.Book> fetchRangeOfPublishedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Book.BOOK.PUBLISHED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>published_at IN (values)</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.Book> fetchByPublishedAt(LocalDateTime... values) {
        return fetch(Book.BOOK.PUBLISHED_AT, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.Book> fetchRangeOfStatus(UByte lowerInclusive, UByte upperInclusive) {
        return fetchRange(Book.BOOK.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.Book> fetchByStatus(UByte... values) {
        return fetch(Book.BOOK.STATUS, values);
    }

    /**
     * Fetch records that have <code>character_count BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.Book> fetchRangeOfCharacterCount(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Book.BOOK.CHARACTER_COUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>character_count IN (values)</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.Book> fetchByCharacterCount(Integer... values) {
        return fetch(Book.BOOK.CHARACTER_COUNT, values);
    }

    /**
     * Fetch records that have <code>is_deleted BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.Book> fetchRangeOfIsDeleted(UByte lowerInclusive, UByte upperInclusive) {
        return fetchRange(Book.BOOK.IS_DELETED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_deleted IN (values)</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.Book> fetchByIsDeleted(UByte... values) {
        return fetch(Book.BOOK.IS_DELETED, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.Book> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Book.BOOK.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.Book> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(Book.BOOK.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.Book> fetchRangeOfUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Book.BOOK.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<com.bcorp.polaris.model.tables.pojos.Book> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(Book.BOOK.UPDATED_AT, values);
    }
}
